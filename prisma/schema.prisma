datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
    //  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

//npx prisma generate
//npx prisma db push
generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String     @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?    @unique
    emailVerified DateTime?  @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    UserData      UserData[]

    @@map("users")
}

model CardVocabularyData {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    index      Int //編號
    question   String
    answer     String
    supperUser String //提供者
    note       String //單字補充
    isShow     Boolean //是否顯示
    createDT   DateTime //增加時間

    @@unique([index])
}

model UserData {
    id                   String   @id @default(auto()) @map("_id") @db.ObjectId
    UserData             User     @relation(fields: [UserId], references: [id])
    UserId               String   @db.ObjectId
    PassVocabularyIdList String[]
}
