datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
    //  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

//npx prisma generate
//npx prisma db push
generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
    name                   String?
    email                  String?                  @unique
    emailVerified          DateTime?                @map("email_verified")
    image                  String?
    accounts               Account[]
    sessions               Session[]
    isManager              Boolean                  @default(false)
    UserLearnData          UserLearnData            @relation(fields: [userLearnDataId], references: [id])
    userLearnDataId        String                   @db.ObjectId
    CardVocabularySelfData CardVocabularySelfData[]

    @@map("users")
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model CardVocabularyData {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    index          Int //編號
    question       String //問題
    answer         String //答案
    supperUser     String //提供者
    translateStr   String //中文意思
    note           String //單字的額外補充說明
    isShow         Boolean //是否顯示
    createDT       DateTime //增加時間
    vocabularyType Int //題目難度(編號)
}

model CardVocabularySelfData {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    index          Int //編號
    question       String //問題
    answer         String //答案
    translateStr   String //中文意思
    note           String //單字的額外補充說明
    nowMemoryValue Int //記憶程度
    vocabularyType Int //題目難度(編號)
    isShow         Boolean //是否顯示 偏向刪除的不顯示
    isBeMemory     Boolean //是否記憶
    createDT       DateTime //增加時間
    User           User     @relation(fields: [userId], references: [id])
    userId         String   @db.ObjectId
}

model UserLearnData {
    id                      String @id @default(auto()) @map("_id") @db.ObjectId
    UserId                  String @db.ObjectId
    PassVocabularyIndexList Int[] //CardVocabularyData的index
    User                    User[]
}

// model User {
//     id            String    @id @default(auto()) @map("_id") @db.ObjectId
//     userName      String
//     userId        String    @unique
//     email         String?
//     emailVerified DateTime?
//     password      String
//     loginType     String
//     sessions      Session[]
// }

// model Account {
//    id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(uuid()) @map("_id") @db.ObjectId
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
